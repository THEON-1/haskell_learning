
ghci> :info Monad

-- >>= (bind)
(>>=) :: Monad m => m a -> (a -> m b) -> m b

maybeadd :: Num b => Maybe b -> b -> Maybe b
maybeadd mx y = mx >>= (\x -> Just $ x+y)
maybeadd :: Num b => Maybe b -> Maybe b -> Maybe b
maybeadd mx my = mx >>= (\x -> my >>= (\y -> Just $ x+y))

monadd :: (Monad m, Num b) => m b -> m b -> m b
monadd mx my = mx >>= (\x -> my >>= (\y -> return $ x+y))
monadd mx my = do
    x <- mx
    y <- my
    return $ x+y

instance Monad Maybe where
    m >>= f = case m of 
        Nothing -> Nothing
        Just x -> f x
    return v = Just v

 -- >>
 (>>) :: Monad m => m a -> m b -> m b
m >> n = m >>= \_ -> n

Nothing >> Just 1
    ==> Just 1

Just 2 >> Just 1
    ==> Just 1

Just 1 >> Nothing
    ==> Nothing

act >> ...
do
    act
    ...

-- Monad Laws
Left identity
    return a >>= k = k a

Right identity
    m >>= return = m

Associativity
    m >>= (\x -> k x >>= h) = (m >>= k) >>= h
